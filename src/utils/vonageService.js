// =====================================================
// SERVICE VONAGE POUR SMS OTP
// =====================================================

const { Vonage } = require('@vonage/server-sdk');

// Configuration Vonage
const vonage = new Vonage({
  apiKey: process.env.REACT_APP_VONAGE_API_KEY || "5991994e",
  apiSecret: process.env.REACT_APP_VONAGE_API_SECRET || "TXqA0XxEzJQWBtfI"
});

const BRAND_NAME = process.env.REACT_APP_VONAGE_BRAND_NAME || "AB Campus Finance";

class VonageService {
  /**
   * D√©marrer la v√©rification OTP
   * @param {string} phoneNumber - Num√©ro de t√©l√©phone
   * @returns {Promise<Object>} - R√©sultat de la v√©rification
   */
  static async startVerification(phoneNumber) {
    try {
      console.log(`üì± D√©marrage v√©rification Vonage pour: ${phoneNumber}`);
      
      const response = await vonage.verify.start({
        number: phoneNumber,
        brand: BRAND_NAME
      });
      
      console.log(`‚úÖ V√©rification d√©marr√©e, request_id: ${response.request_id}`);
      
      return {
        success: true,
        request_id: response.request_id,
        message: 'Code de v√©rification envoy√©'
      };
      
    } catch (error) {
      console.error(`‚ùå Erreur Vonage startVerification:`, error);
      return {
        success: false,
        error: error.message || 'Erreur lors de l\'envoi du code'
      };
    }
  }

  /**
   * V√©rifier le code OTP
   * @param {string} requestId - ID de la requ√™te
   * @param {string} code - Code OTP
   * @returns {Promise<Object>} - R√©sultat de la v√©rification
   */
  static async checkVerification(requestId, code) {
    try {
      console.log(`üîç V√©rification du code: ${code} pour request_id: ${requestId}`);
      
      const response = await vonage.verify.check(requestId, code);
      
      console.log(`‚úÖ V√©rification termin√©e:`, response);
      
      return {
        success: true,
        status: response.status,
        message: 'Code v√©rifi√© avec succ√®s'
      };
      
    } catch (error) {
      console.error(`‚ùå Erreur Vonage checkVerification:`, error);
      return {
        success: false,
        error: error.message || 'Erreur lors de la v√©rification'
      };
    }
  }

  /**
   * Annuler la v√©rification
   * @param {string} requestId - ID de la requ√™te
   * @returns {Promise<Object>} - R√©sultat de l'annulation
   */
  static async cancelVerification(requestId) {
    try {
      console.log(`‚ùå Annulation de la v√©rification: ${requestId}`);
      
      const response = await vonage.verify.cancel(requestId);
      
      console.log(`‚úÖ V√©rification annul√©e:`, response);
      
      return {
        success: true,
        message: 'V√©rification annul√©e'
      };
      
    } catch (error) {
      console.error(`‚ùå Erreur Vonage cancelVerification:`, error);
      return {
        success: false,
        error: error.message || 'Erreur lors de l\'annulation'
      };
    }
  }

  /**
   * Envoyer un SMS simple (alternative)
   * @param {string} phoneNumber - Num√©ro de t√©l√©phone
   * @param {string} message - Message √† envoyer
   * @returns {Promise<Object>} - R√©sultat de l'envoi
   */
  static async sendSMS(phoneNumber, message) {
    try {
      console.log(`üì± Envoi SMS Vonage √†: ${phoneNumber}`);
      
      const response = await vonage.message.sendSms(
        BRAND_NAME,
        phoneNumber,
        message
      );
      
      console.log(`‚úÖ SMS envoy√©:`, response);
      
      return {
        success: true,
        message_id: response.messages[0]['message-id'],
        message: 'SMS envoy√© avec succ√®s'
      };
      
    } catch (error) {
      console.error(`‚ùå Erreur Vonage sendSMS:`, error);
      return {
        success: false,
        error: error.message || 'Erreur lors de l\'envoi du SMS'
      };
    }
  }

  /**
   * G√©n√©rer un code OTP et l'envoyer
   * @param {string} phoneNumber - Num√©ro de t√©l√©phone
   * @returns {Promise<Object>} - R√©sultat de l'envoi
   */
  static async sendOTP(phoneNumber) {
    try {
      // G√©n√©rer un code OTP √† 6 chiffres
      const otpCode = Math.floor(100000 + Math.random() * 900000).toString();
      
      const message = `Votre code de v√©rification AB Campus Finance est: ${otpCode}. Valide 10 minutes.`;
      
      const result = await this.sendSMS(phoneNumber, message);
      
      if (result.success) {
        return {
          success: true,
          otp_code: otpCode,
          message_id: result.message_id,
          message: 'Code OTP envoy√© avec succ√®s'
        };
      } else {
        return result;
      }
      
    } catch (error) {
      console.error(`‚ùå Erreur Vonage sendOTP:`, error);
      return {
        success: false,
        error: error.message || 'Erreur lors de l\'envoi du code OTP'
      };
    }
  }
}

module.exports = VonageService;
