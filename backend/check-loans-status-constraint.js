// Script pour v√©rifier les contraintes de statut des pr√™ts
require('dotenv').config({ path: '.env.local' });
const { supabase } = require('./utils/supabaseClient-server');

async function checkLoansStatusConstraint() {
  console.log('\n=== üîç V√©rification des Contraintes de Statut des Pr√™ts ===\n');

  try {
    // 1. V√©rifier les statuts existants dans la table
    console.log('1Ô∏è‚É£ Statuts existants dans la table loans...');
    const { data: existingStatuses, error: statusError } = await supabase
      .from('loans')
      .select('status')
      .not('status', 'is', null);

    if (statusError) {
      console.error('‚ùå Erreur r√©cup√©ration statuts:', statusError.message);
      return;
    }

    const uniqueStatuses = [...new Set(existingStatuses.map(loan => loan.status))];
    console.log('üìä Statuts trouv√©s:', uniqueStatuses);

    // 2. Tester diff√©rents statuts pour voir lesquels sont autoris√©s
    console.log('\n2Ô∏è‚É£ Test des diff√©rents statuts...');
    
    const testStatuses = [
      'pending',
      'approved', 
      'active',
      'completed',
      'rejected',
      'cancelled',
      'overdue'
    ];

    for (const status of testStatuses) {
      try {
        console.log(`   Test du statut: "${status}"`);
        
        // R√©cup√©rer un pr√™t en attente pour le test
        const { data: testLoan, error: loanError } = await supabase
          .from('loans')
          .select('id')
          .eq('status', 'pending')
          .limit(1)
          .single();

        if (loanError || !testLoan) {
          console.log(`     ‚ö†Ô∏è  Pas de pr√™t en attente pour tester "${status}"`);
          continue;
        }

        // Tenter la mise √† jour
        const { error: updateError } = await supabase
          .from('loans')
          .update({
            status: status,
            updated_at: new Date().toISOString()
          })
          .eq('id', testLoan.id);

        if (updateError) {
          console.log(`     ‚ùå "${status}" - NON AUTORIS√â: ${updateError.message}`);
        } else {
          console.log(`     ‚úÖ "${status}" - AUTORIS√â`);
          
          // Remettre en pending pour le prochain test
          await supabase
            .from('loans')
            .update({
              status: 'pending',
              updated_at: new Date().toISOString()
            })
            .eq('id', testLoan.id);
        }
      } catch (error) {
        console.log(`     ‚ùå "${status}" - ERREUR: ${error.message}`);
      }
    }

    // 3. V√©rifier la structure de la table
    console.log('\n3Ô∏è‚É£ V√©rification de la structure de la table...');
    const { data: tableInfo, error: tableError } = await supabase
      .rpc('get_table_info', { table_name: 'loans' });

    if (tableError) {
      console.log('‚ö†Ô∏è Impossible de r√©cup√©rer les infos de la table via RPC');
    } else {
      console.log('üìã Informations de la table:', tableInfo);
    }

    console.log('\n=== üí° RECOMMANDATIONS ===\n');
    console.log('üîß ACTIONS N√âCESSAIRES:');
    console.log('1. V√©rifier la contrainte CHECK sur la colonne status');
    console.log('2. Ajouter "rejected" aux valeurs autoris√©es si n√©cessaire');
    console.log('3. Ou utiliser un autre statut comme "cancelled" ou "declined"');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
    console.error('Stack:', error.stack);
  }
}

// Lancer la v√©rification
checkLoansStatusConstraint();
