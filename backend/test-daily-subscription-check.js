require('dotenv').config({ path: '.env.local' });
const { supabase } = require('./utils/supabaseClient-server');

async function testDailySubscriptionCheck() {
  console.log('\n=== üîç Test de V√©rification Quotidienne des Abonnements ===\n');

  // 1. V√©rifier les abonnements existants
  console.log('1Ô∏è‚É£ V√©rification des abonnements existants...');
  const { data: subscriptions, error: fetchError } = await supabase
    .from('push_subscriptions')
    .select('*')
    .limit(10);

  if (fetchError) {
    console.error('‚ùå Erreur r√©cup√©ration abonnements:', fetchError.message);
    return;
  }

  console.log(`‚úÖ ${subscriptions.length} abonnement(s) trouv√©(s)`);

  if (subscriptions.length === 0) {
    console.log('‚ö†Ô∏è Aucun abonnement trouv√© - test impossible');
    return;
  }

  // 2. Analyser les abonnements
  console.log('\n2Ô∏è‚É£ Analyse des abonnements...');
  for (const subscription of subscriptions) {
    console.log(`\nüì± Abonnement ID: ${subscription.id}`);
    console.log(`   Utilisateur: ${subscription.user_id}`);
    console.log(`   Cr√©√© le: ${new Date(subscription.created_at).toLocaleString()}`);
    console.log(`   Derni√®re mise √† jour: ${new Date(subscription.updated_at).toLocaleString()}`);
    
    // Calculer l'√¢ge de l'abonnement
    const ageInDays = (Date.now() - new Date(subscription.created_at).getTime()) / (1000 * 60 * 60 * 24);
    console.log(`   √Çge: ${Math.round(ageInDays)} jours`);
    
    // D√©terminer le statut
    if (ageInDays > 7) {
      console.log(`   ‚ö†Ô∏è Abonnement ancien (${Math.round(ageInDays)} jours) - pourrait √™tre inactif`);
    } else {
      console.log(`   ‚úÖ Abonnement r√©cent (${Math.round(ageInDays)} jours) - probablement actif`);
    }
  }

  // 3. Simuler la v√©rification quotidienne
  console.log('\n3Ô∏è‚É£ Simulation de la v√©rification quotidienne...');
  
  const now = new Date();
  const today = now.toISOString().split('T')[0];
  
  console.log(`üìÖ Date d'aujourd'hui: ${today}`);
  
  // V√©rifier les abonnements qui n'ont pas √©t√© mis √† jour r√©cemment
  const { data: staleSubscriptions, error: staleError } = await supabase
    .from('push_subscriptions')
    .select('*')
    .lt('updated_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()); // Plus de 24h

  if (staleError) {
    console.error('‚ùå Erreur r√©cup√©ration abonnements obsol√®tes:', staleError.message);
  } else {
    console.log(`‚ö†Ô∏è ${staleSubscriptions.length} abonnement(s) obsol√®te(s) (non mis √† jour depuis 24h)`);
    
    if (staleSubscriptions.length > 0) {
      console.log('\nüìã Abonnements obsol√®tes:');
      for (const sub of staleSubscriptions) {
        const lastUpdate = new Date(sub.updated_at);
        const hoursSinceUpdate = (Date.now() - lastUpdate.getTime()) / (1000 * 60 * 60);
        console.log(`   - ${sub.user_id}: ${Math.round(hoursSinceUpdate)}h depuis la derni√®re mise √† jour`);
      }
    }
  }

  // 4. Recommandations
  console.log('\n4Ô∏è‚É£ Recommandations:');
  console.log('‚úÖ Le syst√®me de v√©rification quotidienne est configur√©');
  console.log('‚úÖ Les abonnements inactifs d√©clencheront l\'affichage du prompt');
  console.log('‚úÖ Les abonnements actifs ne d√©clencheront pas le prompt');
  console.log('‚úÖ La v√©rification se fait automatiquement toutes les 24h');

  console.log('\n=== üéØ Test Termin√© ===\n');
}

testDailySubscriptionCheck();
