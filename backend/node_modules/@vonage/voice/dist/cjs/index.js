"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/index.ts
var index_exports = {};
__export(index_exports, {
  AdvancedMachineDetectionMode: () => AdvancedMachineDetectionMode,
  CallDirection: () => CallDirection,
  CallStatus: () => CallStatus,
  ConnectEventType: () => ConnectEventType,
  HttpMethod: () => HttpMethod,
  MachineDetection: () => MachineDetection,
  MachineDetectionBehavior: () => MachineDetectionBehavior,
  NCCOActions: () => NCCOActions,
  OutboundCallWithAnswerURL: () => OutboundCallWithAnswerURL,
  OutboundCallWithNCCO: () => OutboundCallWithNCCO,
  RecordingFormat: () => RecordingFormat,
  TTSLanguages: () => TTSLanguages,
  TTSVoices: () => TTSVoices,
  Voice: () => Voice,
  WebsocketBitrate: () => WebsocketBitrate
});
module.exports = __toCommonJS(index_exports);

// lib/enums/AdvancedMachineDetectionMode.ts
var AdvancedMachineDetectionMode = /* @__PURE__ */ ((AdvancedMachineDetectionMode2) => {
  AdvancedMachineDetectionMode2["DEFAULT"] = "default";
  AdvancedMachineDetectionMode2["DETECT"] = "detect";
  AdvancedMachineDetectionMode2["DETECTBEEP"] = "detect_beep";
  return AdvancedMachineDetectionMode2;
})(AdvancedMachineDetectionMode || {});

// lib/enums/CallDirection.ts
var CallDirection = /* @__PURE__ */ ((CallDirection2) => {
  CallDirection2["OUTBOUND"] = "outbound";
  CallDirection2["INBOUND"] = "inbound";
  return CallDirection2;
})(CallDirection || {});

// lib/enums/CallStatus.ts
var CallStatus = /* @__PURE__ */ ((CallStatus2) => {
  CallStatus2["STARTED"] = "started";
  CallStatus2["RINGING"] = "ringing";
  CallStatus2["ANSWERED"] = "answered";
  CallStatus2["MACHINE"] = "machine";
  CallStatus2["COMPLETED"] = "completed";
  CallStatus2["BUSY"] = "busy";
  CallStatus2["CANCELLED"] = "cancelled";
  CallStatus2["FAILED"] = "failed";
  CallStatus2["REJECTED"] = "rejected";
  CallStatus2["TIMEOUT"] = "timeout";
  CallStatus2["UNANSWERED"] = "unanswered";
  return CallStatus2;
})(CallStatus || {});

// lib/enums/HttpMethod.ts
var HttpMethod = /* @__PURE__ */ ((HttpMethod2) => {
  HttpMethod2["GET"] = "GET";
  HttpMethod2["POST"] = "POST";
  return HttpMethod2;
})(HttpMethod || {});

// lib/enums/MachineDetctionBehavior.ts
var MachineDetectionBehavior = /* @__PURE__ */ ((MachineDetectionBehavior2) => {
  MachineDetectionBehavior2["CONTINUE"] = "continue";
  MachineDetectionBehavior2["HANGUP"] = "hangup";
  return MachineDetectionBehavior2;
})(MachineDetectionBehavior || {});

// lib/enums/NCCOActions.ts
var NCCOActions = /* @__PURE__ */ ((NCCOActions2) => {
  NCCOActions2["CONNECT"] = "connect";
  NCCOActions2["CONVERSATION"] = "conversation";
  NCCOActions2["INPUT"] = "input";
  NCCOActions2["NOTIFY"] = "notify";
  NCCOActions2["RECORD"] = "record";
  NCCOActions2["STREAM"] = "stream";
  NCCOActions2["TALK"] = "talk";
  return NCCOActions2;
})(NCCOActions || {});

// lib/enums/TTSLanguages.ts
var TTSLanguages = /* @__PURE__ */ ((TTSLanguages2) => {
  TTSLanguages2["AF_ZA"] = "af-ZA";
  TTSLanguages2["AR"] = "ar";
  TTSLanguages2["BG_BG"] = "bg-BG";
  TTSLanguages2["BN_IN"] = "bn-IN";
  TTSLanguages2["CA_ES"] = "ca-ES";
  TTSLanguages2["CMN_CN"] = "cmn-CN";
  TTSLanguages2["CMN_TW"] = "cmn-TW";
  TTSLanguages2["CS_CZ"] = "cs-CZ";
  TTSLanguages2["CY_GB"] = "cy-GB";
  TTSLanguages2["DA_DK"] = "da-DK";
  TTSLanguages2["DE_AT"] = "de-AT";
  TTSLanguages2["DE_DE"] = "de-DE";
  TTSLanguages2["DE_ET"] = "de-ET";
  TTSLanguages2["EL_GR"] = "el-GR";
  TTSLanguages2["EN_AU"] = "en-AU";
  TTSLanguages2["EN_GB"] = "en-GB";
  TTSLanguages2["EN_GB_SCT"] = "en-GB-SCT";
  TTSLanguages2["EN_GB_WLS"] = "en-GB-WLS";
  TTSLanguages2["EN_IE"] = "en-IE";
  TTSLanguages2["EN_IN"] = "en-IN";
  TTSLanguages2["EN_NZ"] = "en-NZ";
  TTSLanguages2["EN_US"] = "en-US";
  TTSLanguages2["EN_ZA"] = "en-ZA";
  TTSLanguages2["ES_CO"] = "es-CO";
  TTSLanguages2["ES_ES"] = "es-ES";
  TTSLanguages2["ES_MX"] = "es-MX";
  TTSLanguages2["ES_US"] = "es-US";
  TTSLanguages2["EU_ES"] = "eu-ES";
  TTSLanguages2["FI_FI"] = "fi-FI";
  TTSLanguages2["FIL_PH"] = "fil-PH";
  TTSLanguages2["FR_CA"] = "fr-CA";
  TTSLanguages2["FR_FR"] = "fr-FR";
  TTSLanguages2["GL_ES"] = "gl-ES";
  TTSLanguages2["GU_IN"] = "gu-IN";
  TTSLanguages2["HE_IL"] = "he-IL";
  TTSLanguages2["HI_IN"] = "hi-IN";
  TTSLanguages2["HU_HU"] = "hu-HU";
  TTSLanguages2["ID_ID"] = "id-ID";
  TTSLanguages2["IS_IS"] = "is-IS";
  TTSLanguages2["IT_IT"] = "it-IT";
  TTSLanguages2["JA_JP"] = "ja-JP";
  TTSLanguages2["KN_IN"] = "kn-IN";
  TTSLanguages2["KO_KR"] = "ko-KR";
  TTSLanguages2["LV_LV"] = "lv-LV";
  TTSLanguages2["ML_IN"] = "ml-IN";
  TTSLanguages2["MS_MY"] = "ms-MY";
  TTSLanguages2["NB_NO"] = "nb-NO";
  TTSLanguages2["NL_BE"] = "nl-BE";
  TTSLanguages2["NL_NL"] = "nl-NL";
  TTSLanguages2["NO_NO"] = "no-NO";
  TTSLanguages2["PA_IN"] = "pa-IN";
  TTSLanguages2["PL_PL"] = "pl-PL";
  TTSLanguages2["PT_BR"] = "pt-BR";
  TTSLanguages2["PT_PT"] = "pt-PT";
  TTSLanguages2["RO_RO"] = "ro-RO";
  TTSLanguages2["RU_RU"] = "ru-RU";
  TTSLanguages2["SK_SK"] = "sk-SK";
  TTSLanguages2["SR_RS"] = "sr-RS";
  TTSLanguages2["SV_SE"] = "sv-SE";
  TTSLanguages2["TA_IN"] = "ta-IN";
  TTSLanguages2["TE_IN"] = "te-IN";
  TTSLanguages2["TH_TH"] = "th-TH";
  TTSLanguages2["TR_TR"] = "tr-TR";
  TTSLanguages2["UK_UA"] = "uk-UA";
  TTSLanguages2["VI_VN"] = "vi-VN";
  TTSLanguages2["YUE_CN"] = "yue-CN";
  return TTSLanguages2;
})(TTSLanguages || {});

// lib/enums/TTSVoices.ts
var TTSVoices = /* @__PURE__ */ ((TTSVoices2) => {
  TTSVoices2["ADITI"] = "Aditi";
  TTSVoices2["AGNIESZKA"] = "Agnieszka";
  TTSVoices2["ALVA"] = "Alva";
  TTSVoices2["AMY"] = "Amy";
  TTSVoices2["ASTRID"] = "Astrid";
  TTSVoices2["BIANCA"] = "Bianca";
  TTSVoices2["BRIAN"] = "Brian";
  TTSVoices2["CARLA"] = "Carla";
  TTSVoices2["CARMEN"] = "Carmen";
  TTSVoices2["CARMIT"] = "Carmit";
  TTSVoices2["CATARINA"] = "Catarina";
  TTSVoices2["CELINE"] = "Celine";
  TTSVoices2["CEM"] = "Cem";
  TTSVoices2["CHANTAL"] = "Chantal";
  TTSVoices2["CHIPMUNK"] = "Chipmunk";
  TTSVoices2["CONCHITA"] = "Conchita";
  TTSVoices2["CRISTIANO"] = "Cristiano";
  TTSVoices2["DAMAYANTI"] = "Damayanti";
  TTSVoices2["DORA"] = "Dora";
  TTSVoices2["EMMA"] = "Emma";
  TTSVoices2["EMPAR"] = "Empar";
  TTSVoices2["ENRIQUE"] = "Enrique";
  TTSVoices2["ERIC"] = "Eric";
  TTSVoices2["EWA"] = "Ewa";
  TTSVoices2["FELIPE"] = "Felipe";
  TTSVoices2["FILIZ"] = "Filiz";
  TTSVoices2["GERAINT"] = "Geraint";
  TTSVoices2["GIORGIO"] = "Giorgio";
  TTSVoices2["GWYNETH"] = "Gwyneth";
  TTSVoices2["HANS"] = "Hans";
  TTSVoices2["HENRIK"] = "Henrik";
  TTSVoices2["INES"] = "Ines";
  TTSVoices2["IOANA"] = "Ioana";
  TTSVoices2["IVETA"] = "Iveta";
  TTSVoices2["IVY"] = "Ivy";
  TTSVoices2["JACEK"] = "Jacek";
  TTSVoices2["JAN"] = "Jan";
  TTSVoices2["JENNIFER"] = "Jennifer";
  TTSVoices2["JOANA"] = "Joana";
  TTSVoices2["JOANNA"] = "Joanna";
  TTSVoices2["JOEY"] = "Joey";
  TTSVoices2["JORDI"] = "Jordi";
  TTSVoices2["JUSTIN"] = "Justin";
  TTSVoices2["KANYA"] = "Kanya";
  TTSVoices2["KARL"] = "Karl";
  TTSVoices2["KENDRA"] = "Kendra";
  TTSVoices2["KIMBERLY"] = "Kimberly";
  TTSVoices2["LAILA"] = "Laila";
  TTSVoices2["LAURA"] = "Laura";
  TTSVoices2["LEA"] = "Lea";
  TTSVoices2["LEKHA"] = "Lekha";
  TTSVoices2["LIV"] = "Liv";
  TTSVoices2["LOTTE"] = "Lotte";
  TTSVoices2["LUCIA"] = "Lucia";
  TTSVoices2["LUCIANA"] = "Luciana";
  TTSVoices2["MADS"] = "Mads";
  TTSVoices2["MAGED"] = "Maged";
  TTSVoices2["MAJA"] = "Maja";
  TTSVoices2["MARISKA"] = "Mariska";
  TTSVoices2["MARLENE"] = "Marlene";
  TTSVoices2["MATHIEU"] = "Mathieu";
  TTSVoices2["MATTHEW"] = "Matthew";
  TTSVoices2["MAXIM"] = "Maxim";
  TTSVoices2["MEI_JIA"] = "Mei-Jia";
  TTSVoices2["MELINA"] = "Melina";
  TTSVoices2["MIA"] = "Mia";
  TTSVoices2["MIGUEL"] = "Miguel";
  TTSVoices2["MIREN"] = "Miren";
  TTSVoices2["MIZUKI"] = "Mizuki";
  TTSVoices2["MONTSERRAT"] = "Montserrat";
  TTSVoices2["NAJA"] = "Naja";
  TTSVoices2["NICOLE"] = "Nicole";
  TTSVoices2["NIKOS"] = "Nikos";
  TTSVoices2["NORA"] = "Nora";
  TTSVoices2["OSKAR"] = "Oskar";
  TTSVoices2["PENELOPE"] = "Penelope";
  TTSVoices2["RAVEENA"] = "Raveena";
  TTSVoices2["RICARDO"] = "Ricardo";
  TTSVoices2["RUBEN"] = "Ruben";
  TTSVoices2["RUSSELL"] = "Russell";
  TTSVoices2["SALLI"] = "Salli";
  TTSVoices2["SATU"] = "Satu";
  TTSVoices2["SEOYEON"] = "Seoyeon";
  TTSVoices2["SIN_JI"] = "Sin-Ji";
  TTSVoices2["SORA"] = "Sora";
  TTSVoices2["TAKUMI"] = "Takumi";
  TTSVoices2["TARIK"] = "Tarik";
  TTSVoices2["TATYANA"] = "Tatyana";
  TTSVoices2["TESSA"] = "Tessa";
  TTSVoices2["TIAN_TIAN"] = "Tian-Tian";
  TTSVoices2["VICKI"] = "Vicki";
  TTSVoices2["VITORIA"] = "Vitoria";
  TTSVoices2["YELDA"] = "Yelda";
  TTSVoices2["ZEINA"] = "Zeina";
  TTSVoices2["ZHIYU"] = "Zhiyu";
  TTSVoices2["ZUZANA"] = "Zuzana";
  return TTSVoices2;
})(TTSVoices || {});

// lib/enums/Endpoint/WebsocketBitrate.ts
var WebsocketBitrate = /* @__PURE__ */ ((WebsocketBitrate2) => {
  WebsocketBitrate2["RATE_8000"] = "audio/l16;rate=8000";
  WebsocketBitrate2["RATE_16000"] = "audio/l16;rate=16000";
  return WebsocketBitrate2;
})(WebsocketBitrate || {});

// lib/enums/NCCO/ConnectEventType.ts
var ConnectEventType = /* @__PURE__ */ ((ConnectEventType2) => {
  ConnectEventType2["SYNCHRONOUS"] = "synchronous";
  return ConnectEventType2;
})(ConnectEventType || {});

// lib/enums/NCCO/MachineDetection.ts
var MachineDetection = /* @__PURE__ */ ((MachineDetection2) => {
  MachineDetection2["CONTINUE"] = "continue";
  MachineDetection2["HANGUP"] = "hangup";
  return MachineDetection2;
})(MachineDetection || {});

// lib/enums/NCCO/RecordingFormat.ts
var RecordingFormat = /* @__PURE__ */ ((RecordingFormat2) => {
  RecordingFormat2["MP3"] = "mp3";
  RecordingFormat2["WAV"] = "wav";
  RecordingFormat2["OGG"] = "ogg";
  return RecordingFormat2;
})(RecordingFormat || {});

// lib/voice.ts
var import_server_client = require("@vonage/server-client");
var import_vetch = require("@vonage/vetch");
var apiCallsToCalls = (call) => {
  delete call._links;
  const transformedCall = import_server_client.Client.transformers.camelCaseObjectKeys(
    call,
    true,
    true
  );
  delete transformedCall.conversationUuid;
  return {
    ...transformedCall,
    conversationUUID: call.conversation_uuid
  };
};
var NCCOToApiCalls = (ncco) => ncco.map((action) => {
  switch (action.action) {
    case "connect" /* CONNECT */:
      return {
        ...action,
        endpoint: action.endpoint?.map((endpoint) => {
          switch (endpoint.type) {
            case "sip":
              return {
                type: "sip",
                uri: endpoint.uri,
                headers: endpoint.headers,
                standardHeaders: {
                  "User-to-User": Object.hasOwn(endpoint.standardHeaders || {}, "User-to-User") ? { ...endpoint.standardHeaders }["User-to-User"] : endpoint.standardHeaders?.userToUser
                }
              };
            default:
              return endpoint;
          }
        })
      };
    default:
      return action;
  }
});
var Voice = class extends import_server_client.Client {
  authType = import_server_client.AuthenticationType.JWT;
  /**
   * Retrieves details of all calls using pagination.
   *
   * @param {GetCallDetailsParameters} params - Optional parameters for filtering and pagination.
   * @return {AsyncGenerator<CallDetail, void, undefined>} An async generator that yields call details or void when there are no more results.
   *
   * @example
   * ```ts
   * for await (const call of voiceClient.getAllCalls()) {
   *   console.log(call.startTime);
   * }
   * ```
   */
  async *getAllCalls(params = {}) {
    let next = null;
    params.recordIndex = params?.recordIndex || 0;
    do {
      const resp = await this.getCallsPage(params);
      yield* resp?._embedded?.calls.map(apiCallsToCalls);
      next = resp?._links?.next ? new URL(resp._links.next.href) : null;
      if (next) {
        params.recordIndex = parseInt(
          next.searchParams.get("record_index")
        );
      }
    } while (next);
  }
  /**
   * Retrieves a page of call details based on the specified parameters.
   *
   * @param {GetCallDetailsParameters} params - Optional parameters for filtering and pagination.
   * @return {Promise<CallPageResponse>} A promise that resolves to a page of call details.
   *
   * @example
   * ```ts
   * const page = await voiceClient.getCallsPage();
   * for (const call of page._embedded.calls) {
   *   console.log(call.startTime);
   * }
   * ```
   *
   * @example
   * Get the next page of call details
   * ```ts
   * const page = await voiceClient.getCallsPage({
   *   pageSize: 4,
   *   recordIndex: 10,
   * });
   * for (const call of page._embedded.calls) {
   *   console.log(call.startTime);
   * }
   * ```
   *
   * @example
   * Get all started calls
   * ```ts
   * import { CallStatus } from '@vonage/voice';
   *
   * const page = await voiceClient.getCallsPage({
   *   pageSize: 4,
   *   recordIndex: 10,
   *   status: CallStatus.STARTED,
   * });
   * for (const call of page._embedded.calls) {
   *   console.log(call.startTime);
   * }
   * ```
   */
  async getCallsPage(params) {
    const resp = await this.sendGetRequest(
      `${this.config.apiHost}/v1/calls`,
      import_server_client.Client.transformers.snakeCaseObjectKeys(params)
    );
    return {
      ...resp.data
    };
  }
  /**
   * Searches for call details based on the provided filter.
   *
   * @param {GetCallDetailsParameters} [filter] - Optional filter criteria to narrow down the search.
   * @return {Promise<CallPageResponse>} A promise that resolves to a page of call details matching the filter.
   *
   * @example
   * ```ts
   * const page = await voiceClient.search({
   *   pageSize: 4,
   * });
   *
   * for (const call of page._embedded.calls) {
   *   console.log(call.startTime);
   *   console.log(call.status);
   *   console.log(call.direction);
   *   console.log(call.duration);
   * };
   * ```
   */
  async search(filter) {
    return this.getCallsPage(filter);
  }
  /**
   * Retrieves detailed information about a specific call using its UUID.
   *
   * @param {string} uuid - The UUID of the call to retrieve details for.
   * @return {Promise<CallDetail>} A promise that resolves to detailed information about the call.
   *
   * @example
   * ```ts
   * const call = await voiceClient.getCall('CALL_UUID');
   * console.log(call.startTime);
   * ```
   */
  async getCall(uuid) {
    const resp = await this.sendGetRequest(
      `${this.config.apiHost}/v1/calls/${uuid}`
    );
    return apiCallsToCalls(resp.data);
  }
  /**
   * Initiates an outbound call with the specified configuration.
   *
   * @param {OutboundCall} call - The configuration for the outbound call.
   * @return {Promise<CallResult>} A promise that resolves to the result of the outbound call initiation.
   *
   * @example
   * Create a call with answer NCCO
   * ```ts
   * const call = await voiceClient.createOutboundCall({
   *   to: [{
   *     type: 'phone',
   *     number: TO_NUMBER
   *   }],
   *   asnwer_url: ['https://example.com/answer'],
   * });
   *
   * console.log(call.uuid);
   *
   * ```
   * @example
   * Create a call with answer URL
   * ```ts
   * const call = await voiceClient.createOutboundCall({
   *   to: [{
   *     type: 'phone',
   *     number: TO_NUMBER
   *   }],
   *   ncco: [{
   *     action: 'talk',
   *     text: 'This is a text to speech call from Vonage'
   *   }]
   * });
   *
   * console.log(call.uuid);
   * ```
   */
  async createOutboundCall(call) {
    const callRequest = import_server_client.Client.transformers.snakeCaseObjectKeys(call, true);
    if (call.ncco) {
      callRequest.ncco = call.ncco;
    }
    const to = call.to.map((endpoint) => {
      switch (endpoint.type) {
        case "sip":
          return {
            type: "sip",
            uri: endpoint.uri,
            headers: endpoint.headers,
            standard_headers: {
              "User-to-User": endpoint.standardHeaders?.userToUser
            }
          };
      }
      return endpoint;
    });
    callRequest.to = to;
    const resp = await this.sendPostRequest(
      `${this.config.apiHost}/v1/calls`,
      callRequest
    );
    const result = import_server_client.Client.transformers.camelCaseObjectKeys(
      resp.data,
      true,
      true
    );
    delete result.conversationUuid;
    result.conversationUUID = resp.data.conversation_uuid;
    return result;
  }
  /**
   * Plays DTMF (Dual-Tone Multi-Frequency) tones on an active call.
   *
   * @param {string} uuid - The UUID of the call on which to play DTMF tones.
   * @param {string} digits - The DTMF tones to play.
   * @return {Promise<CallUpdateResult>} A promise that resolves to the result of playing DTMF tones on the call.
   *
   * @example
   * ```ts
   * const result = await voiceClient.playDTMF('CALL_UUID', '1234');
   * console.log(result.status);
   * ```
   */
  async playDTMF(uuid, digits) {
    const resp = await this.sendPutRequest(
      `${this.config.apiHost}/v1/calls/${uuid}/dtmf`,
      { digits }
    );
    return import_server_client.Client.transformers.snakeCaseObjectKeys(
      resp.data,
      true,
      true
    );
  }
  /**
   * Register a listener to receive asynchronous DTMF inputs from a call
   *
   * This is only applicable to Input NCCO events with the mode set to
   * asynchronous. The payload delivered to this URL will be an Input webhook
   * event with a single DTMF digit every time the callee enters DTMF into the
   * call.
   *
   * @param {string} uuid - The UUID of the call leg
   * @param {string} eventUrl - The The URL to send DTMF events to, as a POST request.
   * @return {Promise<void>} A promise that resolves to the result
   *
   * @example
   * ```ts
   * const result = await voiceClient.subscribeDTMF('CALL_UUID', 'https://example.com/dtmf');
   * console.log(result.status);
   * ```
   */
  async subscribeDTMF(uuid, eventUrl) {
    await this.sendPutRequest(
      `${this.config.apiHost}/v1/calls/${uuid}/input/dtmf`,
      { event_url: [eventUrl] }
    );
  }
  /**
   * Removes the registered DTMF listener
   * @param {string} uuid - The UUID of the call leg
   * @return {Promise<void>} A promise that resolves to the result
   *
   * @example
   * ```ts
   * const result = await voiceClient.subscribeDTMF('CALL_UUID', 'https://example.com/dtmf');
   * console.log(result.status);
   * ```
   */
  async unsubscribeDTMF(uuid) {
    await this.sendDeleteRequest(
      `${this.config.apiHost}/v1/calls/${uuid}/input/dtmf`
    );
  }
  /**
   * Plays text-to-speech (TTS) audio on an active call.
   *
   * @param {string} uuid - The UUID of the call on which to play TTS audio.
   * @param {TalkAction} action - The TTS action configuration.
   * @return {Promise<CallUpdateResult>} A promise that resolves to the result of playing TTS audio on the call.
   *
   * @example
   * ```ts
   * const result = await voiceClient.playTTS(
   *   CALL_UUID,
   *   {
   *     text: 'This is a text to speech call from Vonage',
   *   },
   * );
   *
   * console.log(result.status);
   * ```
   */
  async playTTS(uuid, action) {
    const resp = await this.sendPutRequest(
      `${this.config.apiHost}/v1/calls/${uuid}/talk`,
      {
        text: action.text,
        loop: action.loop,
        level: action.level,
        language: action.language,
        style: action.style,
        premium: action.premium
      }
    );
    return import_server_client.Client.transformers.snakeCaseObjectKeys(
      resp.data,
      true,
      true
    );
  }
  /**
   * Stops any ongoing text-to-speech (TTS) audio playback on an active call.
   *
   * @param {string} uuid - The UUID of the call on which to stop TTS audio playback.
   * @return {Promise<CallUpdateResult>} A promise that resolves to the result of stopping TTS audio playback on the call.
   *
   * @example
   *
   * ```ts
   * const result = await voiceClient.stopTTS(CALL_UUID);
   * console.log(result.status);
   * ```
   */
  async stopTTS(uuid) {
    const resp = await this.sendDeleteRequest(
      `${this.config.apiHost}/v1/calls/${uuid}/talk`
    );
    return import_server_client.Client.transformers.snakeCaseObjectKeys(
      resp.data,
      true,
      true
    );
  }
  /**
   * Stream audio to an active call, allowing you to play audio files or live audio streams.
   *
   * @param {string} uuid - The UUID of the call to which to stream audio.
   * @param {string} url - The URL of the audio stream to play.
   * @param {number} [loop=1] - The number of times to loop the audio stream (default is 1).
   * @param {number} [volumeLevel=0.0] - The volume level of the audio stream (0.0 to 1.0, default is 0.0).
   * @return {Promise<UpdateCallResponse>} A promise that resolves to the result of streaming audio to the call.
   *
   *
   * @example
   * ```ts
   * const result = await voiceClient.streamAudio(CALL_UUID, 'https://example.com/audio.mp3');
   * console.log(result.message);
   * ```
   */
  async streamAudio(uuid, url, loop = 1, volumeLevel = 0) {
    const resp = await this.sendPutRequest(
      `${this.config.apiHost}/v1/calls/${uuid}/stream`,
      {
        stream_url: [url],
        loop,
        level: String(volumeLevel)
      }
    );
    return import_server_client.Client.transformers.snakeCaseObjectKeys(
      resp.data,
      true,
      true
    );
  }
  /**
   * Stop streaming audio to an active call.
   *
   * @param {string} uuid - The UUID of the call from which to stop streaming audio.
   * @return {Promise<CallUpdateResult>} A promise that resolves to the result of stopping audio streaming to the call.
   *
   * @example
   * ```ts
   * const result = await voiceClient.stopStreamAudio(CALL_UUID);
   * console.log(result.message);
   * ```
   */
  async stopStreamAudio(uuid) {
    const resp = await this.sendDeleteRequest(
      `${this.config.apiHost}/v1/calls/${uuid}/stream`
    );
    return import_server_client.Client.transformers.snakeCaseObjectKeys(
      resp.data,
      true,
      true
    );
  }
  /**
   * Transfer an active call to a new destination using a Nexmo Call Control Object (NCCO).
   *
   * @param {string} uuid - The UUID of the call to transfer.
   * @param {Action[]} ncco - The NCCO actions defining the transfer destination.
   * @return {Promise<void>} A promise that resolves when the call has been successfully transferred.
   *
   * @example
   * ```ts
   * await voiceClient.transferCallWithNCCO(
   *   CALL_UUID,
   *   [{
   *     action: 'talk',
   *     text: 'You will now be transferred to a new destination''
   *   }],
   * )
   * ```
   */
  async transferCallWithNCCO(uuid, ncco) {
    return this.callAction(
      uuid,
      "transfer",
      {
        type: "ncco",
        ncco: NCCOToApiCalls(ncco)
      }
    );
  }
  /**
   * Transfer an active call to a new destination using a URL.
   *
   * @param {string} uuid - The UUID of the call to transfer.
   * @param {string} url - The URL of the transfer destination.
   * @return {Promise<void>} A promise that resolves when the call has been successfully transferred.
   *
   * @example
   * ```ts
   * await voiceClient.transferCallWithURL(
   *   CALL_UUID,
   *   'https://example.com/transfer',
   * );
   * ```
   */
  async transferCallWithURL(uuid, url) {
    return this.callAction(uuid, "transfer", {
      type: "ncco",
      url: [url]
    });
  }
  /**
   * Hang up an active call.
   *
   * @param {string} uuid - The UUID of the call to hang up.
   * @return {Promise<void>} A promise that resolves when the call has been successfully hung up.
   * @example
   * ```ts
   * await voiceClient.hangupCall(CALL_UUID);
   * ```
   */
  async hangupCall(uuid) {
    return this.callAction(uuid, "hangup");
  }
  /**
   * Mute an active call.
   *
   * @param {string} uuid - The UUID of the call to mute.
   * @return {Promise<void>} A promise that resolves when the call has been successfully muted.
   *
   * @example
   * ```ts
   * await voiceClient.muteCall(CALL_UUID);
   * ```
   */
  async muteCall(uuid) {
    return this.callAction(uuid, "mute");
  }
  /**
   * Unmute a muted call, allowing audio to be transmitted again.
   *
   * @param {string} uuid - The UUID of the call to unmute.
   * @return {Promise<void>} A promise that resolves when the call has been successfully unmuted.
   *
   * @example
   * ```ts
   * await voiceClient.unmuteCall(CALL_UUID);
   * ```
   */
  async unmuteCall(uuid) {
    return this.callAction(uuid, "unmute");
  }
  /**
   * Places a call on earmuff, muting the audio for all participants except the user.
   *
   * @param {string} uuid - The UUID of the call to earmuff.
   * @return {Promise<void>} A promise that resolves when the call has been successfully earmuffed.
   *
   * @example
   * ```ts
   * await voiceClient.earmuffCall(CALL_UUID);
   * ```
   */
  async earmuffCall(uuid) {
    return this.callAction(uuid, "earmuff");
  }
  /**
   * Remove an earmuff from a call, allowing all participants to hear each other again.
   *
   * @param {string} uuid - The UUID of the call to unearmuff.
   * @return {Promise<void>} A promise that resolves when the call has been successfully unearmuffed.
   *
   * @example
   * ```ts
   * await voiceClient.unearmuffCall(CALL_UUID);
   * ```
   */
  async unearmuffCall(uuid) {
    return this.callAction(uuid, "unearmuff");
  }
  /**
   * Download the recording of a call to the specified file path.
   *
   * @param {string} file - The name or recording id of the recording file to download.
   * @param {string} path - The local file path where the recording will be saved.
   * @return {Promise<void>} A promise that resolves when the recording has been successfully downloaded.
   *
   * @example
   * ```ts
   * await voiceClient.downloadRecording(RECORDING_UUID, './recording.mp3');
   * ```
   */
  async downloadRecording(file, path) {
    const config = this.config;
    config.responseType = import_vetch.ResponseTypes.stream;
    const client = new import_server_client.FileClient(this.auth, config);
    return await client.downloadFile(file, path);
  }
  /**
   * Download the transcription of a call to the specified file path.
   *
   * @param {string} file - The name or transcription id of the recording file to download.
   * @param {string} path - The local file path where the transcription will be saved.
   * @return {Promise<void>} A promise that resolves when the transcription has been successfully downloaded.
   *
   * @example
   * ```ts
   * await voiceClient.downloadTranscription(TRANSCRIPTION_UUID, './transcription.txt');
   * ```
   */
  async downloadTranscription(file, path) {
    const config = this.config;
    config.responseType = import_vetch.ResponseTypes.text;
    const client = new import_server_client.FileClient(this.auth, config);
    return await client.downloadFile(file, path);
  }
  /**
   * Send a call action to a specific call identified by its UUID.
   *
   * @param {string} uuid - The UUID of the call to which the action should be applied.
   * @param {string} action - The action to perform on the call (e.g., 'hangup', 'mute', 'unmute').
   * @param {NCCODestination} [destination] - The destination details for transfer actions.
   * @return {Promise<void>} A promise that resolves when the call action has been successfully executed.
   *
   * @example
   * ```ts
   * await voiceClient.callAction(CALL_UUID, 'mute');
   * ```
   */
  async callAction(uuid, action, destination) {
    await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}`, {
      action,
      ...destination ? { destination } : {}
    });
  }
};

// lib/classes/OutboundCall.ts
var import_debug = __toESM(require("debug"));
(0, import_debug.default)("@vonage/voice")(
  "This class is deprecated. Please update to use the CommonOutboundCall type"
);
var OutboundCall = class {
  /**
   * The list of call endpoints to which the outbound call will be made.
   */
  to;
  /**
   * The phone endpoint object representing the caller's information.
   */
  from;
  /**
   * Indicates whether to use a random from number (optional).
   */
  randomFromNumber;
  /**
   * The list of event URLs (optional).
   */
  eventUrl;
  /**
   * The HTTP method to use for event notifications (optional).
   */
  eventMethod;
  /**
   * The machine detection behavior (optional).
   */
  machineDetection;
  /**
   * The length timer for the call (optional).
   */
  lengthTimer;
  /**
   * The ringing timer for the call (optional).
   */
  ringingTimer;
  /**
   * Creates a new outbound call.
   *
   * @param {CallEndpoint} to - The call endpoint to which the outbound call will be made.
   * @param {PhoneEndpointObject} [from] - The phone endpoint object representing the caller's information.
   */
  constructor(to, from) {
    this.to = [to];
    this.from = from;
  }
};

// lib/classes/OutboundCallWithNCCO.ts
var import_debug2 = __toESM(require("debug"));
(0, import_debug2.default)("@vonage/voice")(
  "This class is deprecated. Please update to use the CallWithNCCO type"
);
var OutboundCallWithNCCO = class extends OutboundCall {
  /**
   * The list of NCCO actions.
   */
  ncco;
  /**
   * Creates a new outbound call with NCCO.
   *
   * @param {Array<NCCOAction>} ncco - The NCCO actions for the call.
   * @param {CallEndpoint} to - The call endpoint to which the outbound call will be made.
   * @param {PhoneEndpointObject} [from] - The phone endpoint object representing the caller's information.
   */
  constructor(ncco, to, from) {
    super(to, from);
    this.ncco = ncco;
  }
};

// lib/classes/OutboundCallWithAnswerURL.ts
var import_debug3 = __toESM(require("debug"));
(0, import_debug3.default)("@vonage/voice")(
  "This class is deprecated. Please update to use the CallWithAnswerURL type"
);
var OutboundCallWithAnswerURL = class extends OutboundCall {
  /**
   * The list of answer URLs.
   */
  /* tslint:disable-next-line */
  answer_url;
  /**
   * The list of answer URLs.
   *
   * @deprecated Use `answer_url` instead.
   */
  answerUrl;
  /**
   * Creates a new outbound call with an answer URL.
   *
   * @param {string} answerUrl - The answer URL for the call.
   * @param {CallEndpoint} to - The call endpoint to which the outbound call will be made.
   * @param {PhoneEndpointObject} [from] - The phone endpoint object representing the caller's information.
   */
  constructor(answerUrl, to, from) {
    super(to, from);
    this.answer_url = [answerUrl];
    this.answerUrl = [answerUrl];
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AdvancedMachineDetectionMode,
  CallDirection,
  CallStatus,
  ConnectEventType,
  HttpMethod,
  MachineDetection,
  MachineDetectionBehavior,
  NCCOActions,
  OutboundCallWithAnswerURL,
  OutboundCallWithNCCO,
  RecordingFormat,
  TTSLanguages,
  TTSVoices,
  Voice,
  WebsocketBitrate
});
