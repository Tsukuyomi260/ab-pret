// Script de v√©rification du syst√®me de notifications push
require('dotenv').config({ path: '.env.local' });

console.log('\n=== üîî V√©rification Syst√®me de Notifications Push ===\n');

// 1. V√©rifier les cl√©s VAPID
console.log('1Ô∏è‚É£ Cl√©s VAPID:');
const vapidPublic = process.env.VAPID_PUBLIC_KEY;
const vapidPrivate = process.env.VAPID_PRIVATE_KEY;

if (vapidPublic && vapidPrivate) {
  console.log(`   ‚úÖ VAPID_PUBLIC_KEY: ${vapidPublic.substring(0, 20)}...`);
  console.log(`   ‚úÖ VAPID_PRIVATE_KEY: ${vapidPrivate.substring(0, 20)}...`);
} else {
  console.log('   ‚ùå Cl√©s VAPID manquantes !');
  console.log('   üí° G√©n√©rez-les avec: node generate-vapid-keys.js');
}

// 2. V√©rifier les cl√©s FedaPay
console.log('\n2Ô∏è‚É£ Cl√©s FedaPay:');
const fedapayPublic = process.env.FEDAPAY_PUBLIC_KEY;
const fedapaySecret = process.env.FEDAPAY_SECRET_KEY;
const fedapayUrl = process.env.FEDAPAY_BASE_URL;

if (fedapayPublic && fedapaySecret) {
  console.log(`   ‚úÖ FEDAPAY_PUBLIC_KEY: ${fedapayPublic.substring(0, 15)}...`);
  console.log(`   ‚úÖ FEDAPAY_SECRET_KEY: ${fedapaySecret.substring(0, 15)}...`);
} else {
  console.log('   ‚ùå Cl√©s FedaPay manquantes !');
}

if (fedapayUrl) {
  console.log(`   ‚úÖ FEDAPAY_BASE_URL: ${fedapayUrl}`);
  
  // V√©rifier la coh√©rence
  if (fedapaySecret) {
    if (fedapaySecret.startsWith('sk_live_') && !fedapayUrl.includes('sandbox')) {
      console.log('   ‚úÖ Mode LIVE correctement configur√©');
    } else if (fedapaySecret.startsWith('sk_sandbox_') && fedapayUrl.includes('sandbox')) {
      console.log('   ‚úÖ Mode SANDBOX correctement configur√©');
    } else {
      console.log('   ‚ö†Ô∏è  ATTENTION: Incoh√©rence entre les cl√©s et l\'URL !');
    }
  }
} else {
  console.log('   ‚ùå FEDAPAY_BASE_URL manquante !');
}

// 3. V√©rifier Supabase
console.log('\n3Ô∏è‚É£ Configuration Supabase:');
const supabaseUrl = process.env.SUPABASE_URL || process.env.REACT_APP_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY || process.env.REACT_APP_SUPABASE_ANON_KEY;

if (supabaseUrl && supabaseKey) {
  console.log(`   ‚úÖ SUPABASE_URL: ${supabaseUrl.substring(0, 30)}...`);
  console.log(`   ‚úÖ SUPABASE_KEY: ${supabaseKey.substring(0, 20)}...`);
} else {
  console.log('   ‚ö†Ô∏è  Variables Supabase non trouv√©es dans .env.local');
  console.log('   üí° Cela peut √™tre normal si elles sont ailleurs');
}

// 4. V√©rifier les URLs
console.log('\n4Ô∏è‚É£ URLs de l\'application:');
const backendUrl = process.env.BACKEND_URL;
const frontendUrl = process.env.FRONTEND_URL;

if (backendUrl) {
  console.log(`   ‚úÖ BACKEND_URL: ${backendUrl}`);
} else {
  console.log('   ‚ö†Ô∏è  BACKEND_URL non d√©finie (utilisera la valeur par d√©faut)');
}

if (frontendUrl) {
  console.log(`   ‚úÖ FRONTEND_URL: ${frontendUrl}`);
} else {
  console.log('   ‚ö†Ô∏è  FRONTEND_URL non d√©finie (utilisera la valeur par d√©faut)');
}

// 5. R√©sum√© pour la production
console.log('\n=== üìã R√©sum√© Production ===\n');

const checks = {
  vapid: !!(vapidPublic && vapidPrivate),
  fedapay: !!(fedapayPublic && fedapaySecret && fedapayUrl),
  fedapayMode: fedapaySecret && fedapaySecret.startsWith('sk_live_') && fedapayUrl && !fedapayUrl.includes('sandbox')
};

console.log('Notifications Push:', checks.vapid ? '‚úÖ OK' : '‚ùå NON CONFIGUR√â');
console.log('Paiements FedaPay:', checks.fedapay ? '‚úÖ OK' : '‚ùå NON CONFIGUR√â');
console.log('Mode Production FedaPay:', checks.fedapayMode ? '‚úÖ LIVE' : '‚ö†Ô∏è  SANDBOX ou incorrecte');

if (checks.vapid && checks.fedapay) {
  console.log('\n‚úÖ Syst√®me pr√™t pour la production !\n');
  process.exit(0);
} else {
  console.log('\n‚ùå Configuration incompl√®te. Voir les d√©tails ci-dessus.\n');
  
  if (!checks.vapid) {
    console.log('üìù Pour g√©n√©rer les cl√©s VAPID:');
    console.log('   cd backend && node generate-vapid-keys.js\n');
  }
  
  if (!checks.fedapay) {
    console.log('üìù Consultez: backend/URGENT_FEDAPAY_FIX.md\n');
  }
  
  process.exit(1);
}

