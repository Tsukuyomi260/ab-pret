// Test du syst√®me de rappels pour l'utilisateur sp√©cifique
require('dotenv').config({ path: '.env.local' });
const { supabase } = require('./utils/supabaseClient-server');
const webPush = require('./config/push');

const USER_ID = '33b107a8-bedf-4c54-9535-5b25803e19d7';

async function testReminderSystem() {
  console.log('\n=== üß™ Test du Syst√®me de Rappels ===\n');
  console.log(`üë§ User ID: ${USER_ID}\n`);

  try {
    // 1. R√©cup√©rer le plan d'√©pargne actif
    console.log('1Ô∏è‚É£ R√©cup√©ration du plan d\'√©pargne...');
    const { data: allPlans, error: planError } = await supabase
      .from('savings_plans')
      .select(`
        id,
        plan_name,
        total_amount_target,
        current_balance,
        fixed_amount,
        next_deposit_date,
        status,
        user_id
      `)
      .eq('user_id', USER_ID);

    if (planError) {
      console.error('‚ùå Erreur r√©cup√©ration plans:', planError.message);
      return;
    }

    if (!allPlans || allPlans.length === 0) {
      console.log('‚ùå Aucun plan d\'√©pargne trouv√©');
      return;
    }

    const savingsPlans = allPlans.find(plan => plan.status === 'active');
    
    if (!savingsPlans) {
      console.log('‚ùå Aucun plan d\'√©pargne actif trouv√©');
      console.log('üìã Plans existants:');
      allPlans.forEach((plan, index) => {
        console.log(`   ${index + 1}. ${plan.plan_name} (${plan.status})`);
      });
      return;
    }


    console.log(`‚úÖ Plan trouv√©: ${savingsPlans.plan_name}`);
    console.log(`üìÖ Prochain d√©p√¥t: ${savingsPlans.next_deposit_date}`);
    console.log(`üí∞ Montant: ${parseInt(savingsPlans.fixed_amount).toLocaleString()} FCFA`);

    // 2. Simuler la logique de rappel
    console.log('\n2Ô∏è‚É£ Simulation de la logique de rappel...');
    const today = new Date();
    const depositDate = new Date(savingsPlans.next_deposit_date);
    const daysRemaining = Math.ceil((depositDate - today) / (1000 * 60 * 60 * 24));
    
    console.log(`üìÖ Aujourd'hui: ${today.toLocaleDateString('fr-FR')}`);
    console.log(`üìÖ D√©p√¥t pr√©vu: ${depositDate.toLocaleDateString('fr-FR')}`);
    console.log(`‚è∞ Jours restants: ${daysRemaining}`);

    // V√©rifier si le plan devrait recevoir des rappels
    const shouldSendReminder = daysRemaining >= 0 && daysRemaining <= 3;
    console.log(`üîî Rappel n√©cessaire: ${shouldSendReminder ? 'OUI' : 'NON'}`);

    if (!shouldSendReminder) {
      console.log('‚ÑπÔ∏è  Aucun rappel n√©cessaire (d√©p√¥t trop √©loign√© ou d√©j√† pass√©)');
      return;
    }

    // 3. R√©cup√©rer les infos utilisateur
    console.log('\n3Ô∏è‚É£ R√©cup√©ration des donn√©es utilisateur...');
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('first_name, last_name, email')
      .eq('id', USER_ID)
      .single();

    if (userError || !userData) {
      console.error('‚ùå Erreur r√©cup√©ration utilisateur:', userError?.message);
      return;
    }

    console.log(`‚úÖ Utilisateur: ${userData.first_name} ${userData.last_name}`);

    // 4. R√©cup√©rer les abonnements push
    console.log('\n4Ô∏è‚É£ V√©rification des abonnements push...');
    const { data: subscriptions, error: subError } = await supabase
      .from('push_subscriptions')
      .select('id, subscription, created_at')
      .eq('user_id', USER_ID);

    if (subError) {
      console.error('‚ùå Erreur r√©cup√©ration abonnements:', subError.message);
      return;
    }

    console.log(`üì± Abonnements trouv√©s: ${subscriptions.length}`);
    
    if (subscriptions.length === 0) {
      console.log('‚ö†Ô∏è  L\'utilisateur n\'est pas abonn√© aux notifications push');
      console.log('üí° Il ne recevra PAS les rappels automatiques');
      return;
    }

    // 5. G√©n√©rer le message de rappel
    console.log('\n5Ô∏è‚É£ G√©n√©ration du message de rappel...');
    const clientName = `${userData.first_name} ${userData.last_name}`;
    const amountFormatted = `${parseInt(savingsPlans.fixed_amount).toLocaleString()} FCFA`;
    
    let title, body;
    
    if (daysRemaining === 0) {
      title = "AB Campus Finance - D√©p√¥t d'√©pargne aujourd'hui !";
      body = `Bonjour ${clientName}, c'est aujourd'hui que vous devez effectuer votre d√©p√¥t d'√©pargne de ${amountFormatted}. Si vous ne le faites pas aujourd'hui, vous pourriez perdre tous les int√©r√™ts que vous avez accumul√©s jusqu'√† pr√©sent.`;
    } else {
      const daysText = daysRemaining === 1 ? '24h' : `${daysRemaining} jours`;
      title = "AB Campus Finance - Rappel de d√©p√¥t d'√©pargne";
      body = `Bonjour ${clientName}, votre prochain d√©p√¥t sur votre compte √©pargne est dans ${daysText}. Effectuer votre d√©p√¥t pour ne pas perdre les int√©r√™ts cumul√©s √† ce jour.`;
    }

    console.log(`üìù Titre: ${title}`);
    console.log(`üìù Message: ${body}`);

    // 6. Cr√©er la notification dans la base de donn√©es
    console.log('\n6Ô∏è‚É£ Cr√©ation de la notification dans la DB...');
    const { data: notifData, error: notifError } = await supabase
      .from('notifications')
      .insert([{
        user_id: USER_ID,
        title: title,
        message: body,
        type: 'savings_reminder',
        data: {
          plan_id: savingsPlans.id,
          amount: savingsPlans.fixed_amount,
          days_remaining: daysRemaining,
          deposit_date: savingsPlans.next_deposit_date
        }
      }])
      .select()
      .single();

    if (notifError) {
      console.error('‚ùå Erreur cr√©ation notification:', notifError.message);
      return;
    }

    console.log(`‚úÖ Notification cr√©√©e (ID: ${notifData.id})`);

    // 7. Envoyer les notifications push
    console.log('\n7Ô∏è‚É£ Envoi des notifications push...');
    const payload = JSON.stringify({
      title: title,
      body: body,
      icon: '/logo192.png',
      badge: '/logo192.png',
      data: {
        url: '/ab-epargne',
        type: 'savings_reminder',
        plan_id: savingsPlans.id
      }
    });

    let successCount = 0;
    let errorCount = 0;

    for (const sub of subscriptions) {
      try {
        await webPush.sendNotification(sub.subscription, payload);
        successCount++;
        console.log(`‚úÖ Push envoy√© avec succ√®s (sub ${sub.id.substring(0, 8)}...)`);
      } catch (pushError) {
        errorCount++;
        console.log(`‚ùå Erreur push (sub ${sub.id.substring(0, 8)}...):`, pushError.message);
        
        // Si l'abonnement est expir√©, le supprimer
        if (pushError.statusCode === 410) {
          await supabase
            .from('push_subscriptions')
            .delete()
            .eq('id', sub.id);
          console.log(`üóëÔ∏è  Abonnement expir√© supprim√©`);
        }
      }
    }

    console.log(`\nüìä R√©sultats: ${successCount} r√©ussi(s), ${errorCount} √©chec(s)`);

    // 8. R√©sum√© final
    console.log('\n=== ‚úÖ R√âSUM√â DU TEST ===\n');
    console.log(`üë§ Utilisateur: ${clientName}`);
    console.log(`üìÖ D√©p√¥t pr√©vu: ${depositDate.toLocaleDateString('fr-FR')} (${daysRemaining} jour(s))`);
    console.log(`üí∞ Montant: ${amountFormatted}`);
    console.log(`üì± Abonnements: ${subscriptions.length}`);
    console.log(`üì¨ Notification DB: ‚úÖ Cr√©√©e`);
    console.log(`üì§ Push notifications: ${successCount}/${subscriptions.length} envoy√©es`);
    
    if (successCount > 0) {
      console.log('\nüéâ Test r√©ussi ! L\'utilisateur devrait recevoir la notification.');
    } else {
      console.log('\n‚ö†Ô∏è  Aucune notification push envoy√©e (v√©rifiez les abonnements).');
    }

    console.log('\n‚úÖ Test termin√© !\n');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
    console.error('Stack:', error.stack);
  }
}

// Lancer le test
testReminderSystem();
