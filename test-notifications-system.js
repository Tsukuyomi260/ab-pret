const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// Configuration Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  console.log('Assurez-vous que .env.local contient VITE_SUPABASE_URL et VITE_SUPABASE_ANON_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testNotificationsSystem() {
  console.log('üß™ Test du syst√®me de notifications r√©elles\n');

  try {
    // 1. V√©rifier que la table notifications existe
    console.log('1Ô∏è‚É£ V√©rification de la table notifications...');
    const { data: tableExists, error: tableError } = await supabase
      .from('notifications')
      .select('count')
      .limit(1);

    if (tableError) {
      console.log('‚ö†Ô∏è  Table notifications non trouv√©e, cr√©ation en cours...');
      // Cr√©er la table (simulation - en production, utilisez le script SQL)
      console.log('üìã Ex√©cutez le script create-notifications-table.sql dans Supabase');
      return;
    }

    console.log('‚úÖ Table notifications trouv√©e');

    // 2. Charger les notifications existantes
    console.log('\n2Ô∏è‚É£ Chargement des notifications existantes...');
    const { data: existingNotifications, error: loadError } = await supabase
      .from('notifications')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);

    if (loadError) {
      throw new Error(`Erreur lors du chargement: ${loadError.message}`);
    }

    console.log(`üìä ${existingNotifications.length} notifications trouv√©es`);

    if (existingNotifications.length > 0) {
      console.log('\nüìã Notifications existantes:');
      existingNotifications.forEach((notif, index) => {
        console.log(`   ${index + 1}. [${notif.type.toUpperCase()}] ${notif.title}`);
        console.log(`      ${notif.message}`);
        console.log(`      Priorit√©: ${notif.priority} | Lu: ${notif.read ? 'Oui' : 'Non'}`);
        console.log(`      Cr√©√©e: ${new Date(notif.created_at).toLocaleString('fr-FR')}\n`);
      });
    }

    // 3. Cr√©er une notification de test
    console.log('3Ô∏è‚É£ Cr√©ation d\'une notification de test...');
    const testNotification = {
      title: 'üß™ Test du syst√®me de notifications',
      message: 'Cette notification a √©t√© cr√©√©e pour tester le syst√®me en temps r√©el',
      type: 'info',
      priority: 'medium',
      data: {
        test: true,
        timestamp: new Date().toISOString(),
        source: 'test-script'
      },
      action: 'Voir les d√©tails'
    };

    const { data: newNotification, error: createError } = await supabase
      .from('notifications')
      .insert([testNotification])
      .select()
      .single();

    if (createError) {
      throw new Error(`Erreur lors de la cr√©ation: ${createError.message}`);
    }

    console.log('‚úÖ Notification de test cr√©√©e avec succ√®s');
    console.log(`   ID: ${newNotification.id}`);
    console.log(`   Titre: ${newNotification.title}`);

    // 4. Mettre √† jour la notification comme lue
    console.log('\n4Ô∏è‚É£ Test de mise √† jour (marquer comme lue)...');
    const { error: updateError } = await supabase
      .from('notifications')
      .update({ read: true })
      .eq('id', newNotification.id);

    if (updateError) {
      throw new Error(`Erreur lors de la mise √† jour: ${updateError.message}`);
    }

    console.log('‚úÖ Notification marqu√©e comme lue');

    // 5. V√©rifier la mise √† jour
    console.log('\n5Ô∏è‚É£ V√©rification de la mise √† jour...');
    const { data: updatedNotification, error: verifyError } = await supabase
      .from('notifications')
      .select('*')
      .eq('id', newNotification.id)
      .single();

    if (verifyError) {
      throw new Error(`Erreur lors de la v√©rification: ${verifyError.message}`);
    }

    console.log(`‚úÖ Notification mise √† jour: lu = ${updatedNotification.read}`);

    // 6. Supprimer la notification de test
    console.log('\n6Ô∏è‚É£ Nettoyage - suppression de la notification de test...');
    const { error: deleteError } = await supabase
      .from('notifications')
      .delete()
      .eq('id', newNotification.id);

    if (deleteError) {
      throw new Error(`Erreur lors de la suppression: ${deleteError.message}`);
    }

    console.log('‚úÖ Notification de test supprim√©e');

    // 7. Statistiques finales
    console.log('\n7Ô∏è‚É£ Statistiques finales...');
    const { data: finalNotifications, error: statsError } = await supabase
      .from('notifications')
      .select('*');

    if (statsError) {
      throw new Error(`Erreur lors du comptage: ${statsError.message}`);
    }

    const unreadCount = finalNotifications.filter(n => !n.read).length;
    const totalCount = finalNotifications.length;

    console.log(`üìä Total des notifications: ${totalCount}`);
    console.log(`üìñ Non lues: ${unreadCount}`);
    console.log(`üìñ Lues: ${totalCount - unreadCount}`);

    // 8. Test des types de notifications
    console.log('\n8Ô∏è‚É£ Test des diff√©rents types de notifications...');
    const notificationTypes = [
      {
        title: 'üéØ Demande de pr√™t approuv√©e',
        message: 'Votre demande de pr√™t de 150 000 FCFA a √©t√© approuv√©e avec succ√®s',
        type: 'success',
        priority: 'high',
        data: { loan_amount: 150000, status: 'approved' }
      },
      {
        title: '‚ö†Ô∏è Rappel de paiement',
        message: 'Votre prochain paiement de 25 000 FCFA est pr√©vu dans 3 jours',
        type: 'warning',
        priority: 'medium',
        data: { payment_amount: 25000, due_date: '2024-02-15' }
      },
      {
        title: 'üí≥ Paiement re√ßu',
        message: 'Votre paiement de 20 000 FCFA a √©t√© enregistr√© avec succ√®s',
        type: 'success',
        priority: 'low',
        data: { payment_amount: 20000, received_at: new Date().toISOString() }
      }
    ];

    for (const notif of notificationTypes) {
      const { data: createdNotif, error: typeError } = await supabase
        .from('notifications')
        .insert([notif])
        .select()
        .single();

      if (typeError) {
        console.log(`‚ùå Erreur lors de la cr√©ation de ${notif.type}: ${typeError.message}`);
      } else {
        console.log(`‚úÖ Notification ${notif.type} cr√©√©e: ${createdNotif.title}`);
      }
    }

    console.log('\nüéâ Test du syst√®me de notifications termin√© avec succ√®s !');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('   1. V√©rifiez les notifications dans l\'interface admin');
    console.log('   2. Testez les notifications en temps r√©el');
    console.log('   3. V√©rifiez que les notifications s\'affichent correctement');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    console.error('Stack:', error.stack);
  }
}

// Ex√©cuter le test
testNotificationsSystem();
