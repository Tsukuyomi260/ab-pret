const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.REACT_APP_SUPABASE_URL,
  process.env.REACT_APP_SUPABASE_ANON_KEY
);

async function debugUserLoans(userId) {
  try {
    console.log(`üîç D√©bogage des pr√™ts pour l'utilisateur: ${userId}`);
    
    // R√©cup√©rer tous les pr√™ts de l'utilisateur
    const { data: loans, error } = await supabase
      .from('loans')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('‚ùå Erreur:', error);
      return;
    }
    
    console.log('üìä Tous les pr√™ts de l\'utilisateur:');
    loans.forEach((loan, index) => {
      console.log(`${index + 1}. Pr√™t #${loan.id}`);
      console.log(`   - Statut: ${loan.status}`);
      console.log(`   - Montant: ${loan.amount}`);
      console.log(`   - Cr√©√© le: ${loan.created_at}`);
      console.log(`   - Mis √† jour le: ${loan.updated_at}`);
      console.log('---');
    });

    // V√©rifier la logique de la page de remboursement
    console.log('\nüîç LOGIQUE PAGE REMBOURSEMENT:');
    const activeLoanForRepayment = loans.find(loan => 
      loan.status === 'active' || loan.status === 'approved'
    );
    
    if (activeLoanForRepayment) {
      console.log('‚úÖ Page remboursement: Affiche le pr√™t (actif/approuv√©)');
      console.log(`   - Pr√™t #${activeLoanForRepayment.id} (${activeLoanForRepayment.status})`);
    } else {
      console.log('‚ùå Page remboursement: Aucun pr√™t √† afficher');
    }

    // V√©rifier la logique de la page de demande de pr√™t
    console.log('\nüîç LOGIQUE PAGE DEMANDE DE PR√äT:');
    const activeLoanForRequest = loans.find(loan => 
      loan.status === 'active' || loan.status === 'approved'
    );
    
    if (activeLoanForRequest) {
      console.log('‚ùå Page demande de pr√™t: Emp√™che la demande (pr√™t actif/approuv√©)');
      console.log(`   - Pr√™t #${activeLoanForRequest.id} (${activeLoanForRequest.status})`);
    } else {
      console.log('‚úÖ Page demande de pr√™t: Permet la demande (aucun pr√™t actif/approuv√©)');
    }

    // V√©rifier les paiements pour chaque pr√™t
    console.log('\nüí∞ PAIEMENTS PAR PR√äT:');
    for (const loan of loans) {
      const { data: payments, error: paymentsError } = await supabase
        .from('payments')
        .select('*')
        .eq('loan_id', loan.id);
      
      if (paymentsError) {
        console.error(`‚ùå Erreur r√©cup√©ration paiements pour pr√™t ${loan.id}:`, paymentsError);
        continue;
      }
      
      const totalPaid = payments.reduce((sum, payment) => sum + (payment.amount || 0), 0);
      console.log(`Pr√™t #${loan.id} (${loan.status}): ${payments.length} paiements, total: ${totalPaid} FCFA`);
    }

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  }
}

// Remplacer par l'ID de l'utilisateur qui a le probl√®me
// Vous pouvez trouver cet ID dans les logs de l'application ou dans la base de donn√©es
const userId = '33b107a8-bedf-4c54-9535-5b25803e19d7'; // Paterne Godson
debugUserLoans(userId);
