// Utilitaire pour forcer le rafra√Æchissement du r√¥le utilisateur
import { supabase } from './supabaseClient';

export const forceRoleRefresh = async (userId) => {
  try {
    console.log('[FORCE_ROLE_REFRESH] üîÑ D√©but du rafra√Æchissement forc√© du r√¥le...');
    
    // 1. Nettoyer compl√®tement le cache
    console.log('[FORCE_ROLE_REFRESH] üßπ Nettoyage du cache...');
    localStorage.removeItem('ab_user_cache');
    localStorage.removeItem('ab_user_cache_time');
    sessionStorage.clear();
    
    // 2. R√©cup√©rer la session actuelle
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('[FORCE_ROLE_REFRESH] ‚ùå Erreur session:', sessionError);
      return { success: false, error: sessionError.message };
    }
    
    if (!session?.user) {
      console.log('[FORCE_ROLE_REFRESH] ‚ö†Ô∏è Aucune session active');
      return { success: false, error: 'Aucune session active' };
    }
    
    console.log('[FORCE_ROLE_REFRESH] üë§ Session trouv√©e:', session.user.email);
    
    // 3. R√©cup√©rer le r√¥le depuis la DB
    console.log('[FORCE_ROLE_REFRESH] üóÑÔ∏è R√©cup√©ration du r√¥le depuis la DB...');
    const { data: dbUser, error: dbError } = await supabase
      .from('users')
      .select('role, first_name, last_name, email')
      .eq('id', session.user.id)
      .single();
    
    if (dbError) {
      console.error('[FORCE_ROLE_REFRESH] ‚ùå Erreur DB:', dbError);
      return { success: false, error: dbError.message };
    }
    
    if (!dbUser) {
      console.error('[FORCE_ROLE_REFRESH] ‚ùå Utilisateur non trouv√© en DB');
      return { success: false, error: 'Utilisateur non trouv√©' };
    }
    
    console.log('[FORCE_ROLE_REFRESH] ‚úÖ R√¥le r√©cup√©r√©:', dbUser.role);
    
    // 4. Mettre √† jour le cache avec les bonnes donn√©es
    const userData = {
      id: session.user.id,
      email: session.user.email,
      role: dbUser.role,
      first_name: dbUser.first_name || '',
      last_name: dbUser.last_name || '',
      firstName: dbUser.first_name,
      lastName: dbUser.last_name
    };
    
    localStorage.setItem('ab_user_cache', JSON.stringify(userData));
    localStorage.setItem('ab_user_cache_time', Date.now().toString());
    
    console.log('[FORCE_ROLE_REFRESH] ‚úÖ Cache mis √† jour avec le r√¥le:', dbUser.role);
    
    // 5. Forcer un rechargement de la page pour appliquer les changements
    console.log('[FORCE_ROLE_REFRESH] üîÑ Rechargement de la page...');
    window.location.reload();
    
    return { 
      success: true, 
      role: dbUser.role,
      user: userData 
    };
    
  } catch (error) {
    console.error('[FORCE_ROLE_REFRESH] ‚ùå Erreur g√©n√©rale:', error);
    return { success: false, error: error.message };
  }
};

// Fonction pour v√©rifier si le r√¥le est correct
export const checkRoleConsistency = async () => {
  try {
    const cached = localStorage.getItem('ab_user_cache');
    if (!cached) {
      return { consistent: false, reason: 'Aucun cache trouv√©' };
    }
    
    const cachedUser = JSON.parse(cached);
    const { data: { session } } = await supabase.auth.getSession();
    
    if (!session?.user) {
      return { consistent: false, reason: 'Aucune session active' };
    }
    
    // R√©cup√©rer le r√¥le depuis la DB
    const { data: dbUser, error: dbError } = await supabase
      .from('users')
      .select('role')
      .eq('id', session.user.id)
      .single();
    
    if (dbError || !dbUser) {
      return { consistent: false, reason: 'Impossible de r√©cup√©rer le r√¥le depuis la DB' };
    }
    
    const isConsistent = cachedUser.role === dbUser.role;
    
    return {
      consistent: isConsistent,
      cachedRole: cachedUser.role,
      dbRole: dbUser.role,
      reason: isConsistent ? 'R√¥les coh√©rents' : 'R√¥les incoh√©rents'
    };
    
  } catch (error) {
    console.error('[CHECK_ROLE_CONSISTENCY] ‚ùå Erreur:', error);
    return { consistent: false, reason: error.message };
  }
};
